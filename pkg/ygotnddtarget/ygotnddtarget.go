/*
Package ygotnddtarget is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/tmp/ygot/genutil/names.go
using the following YANG input files:
	- /Users/henderiw/CodeProjects/yang/ndd/0_1_0/combined/ndd-target.yang
Imported modules were sourced from:
	- /Users/henderiw/CodeProjects/yang/ndd/0_1_0/combined/...
*/
package ygotnddtarget

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.ValidatedGoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	TargetEntry map[string]*NddTarget_TargetEntry `path:"target-entry" module:"ndd-target"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewTargetEntry creates a new entry in the TargetEntry list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewTargetEntry(Name string) (*NddTarget_TargetEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TargetEntry == nil {
		t.TargetEntry = make(map[string]*NddTarget_TargetEntry)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TargetEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TargetEntry", key)
	}

	t.TargetEntry[key] = &NddTarget_TargetEntry{
		Name: &Name,
	}

	return t.TargetEntry[key], nil
}

// GetOrCreateTargetEntry retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateTargetEntry(Name string) *NddTarget_TargetEntry {

	key := Name

	if v, ok := t.TargetEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTargetEntry(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTargetEntry got unexpected error: %v", err))
	}
	return v
}

// GetTargetEntry retrieves the value with the specified key from
// the TargetEntry map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetTargetEntry(Name string) *NddTarget_TargetEntry {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TargetEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteTargetEntry deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteTargetEntry(Name string) {
	key := Name

	delete(t.TargetEntry, key)
}

// AppendTargetEntry appends the supplied NddTarget_TargetEntry struct to the
// list TargetEntry of Device. If the key value(s) specified in
// the supplied NddTarget_TargetEntry already exist in the list, an error is
// returned.
func (t *Device) AppendTargetEntry(v *NddTarget_TargetEntry) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TargetEntry == nil {
		t.TargetEntry = make(map[string]*NddTarget_TargetEntry)
	}

	if _, ok := t.TargetEntry[key]; ok {
		return fmt.Errorf("duplicate key for list TargetEntry %v", key)
	}

	t.TargetEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module in whose namespace
// Device belongs.
func (*Device) ΛBelongingModule() string {
	return ""
}

// NddTarget_TargetEntry represents the /ndd-target/target-entry YANG schema element.
type NddTarget_TargetEntry struct {
	AdminState  E_NddCommon_AdminState                       `path:"admin-state" module:"ndd-target"`
	Allocation  map[string]*NddTarget_TargetEntry_Allocation `path:"allocation" module:"ndd-target"`
	Config      *NddTarget_TargetEntry_Config                `path:"config" module:"ndd-target"`
	Description *string                                      `path:"description" module:"ndd-target"`
	Name        *string                                      `path:"name" module:"ndd-target"`
	State       *NddTarget_TargetEntry_State                 `path:"state" module:"ndd-target"`
	VendorType  E_NddTarget_VendorType                       `path:"vendor-type" module:"ndd-target"`
}

// IsYANGGoStruct ensures that NddTarget_TargetEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddTarget_TargetEntry) IsYANGGoStruct() {}

// NewAllocation creates a new entry in the Allocation list of the
// NddTarget_TargetEntry struct. The keys of the list are populated from the input
// arguments.
func (t *NddTarget_TargetEntry) NewAllocation(ServiceName string) (*NddTarget_TargetEntry_Allocation, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Allocation == nil {
		t.Allocation = make(map[string]*NddTarget_TargetEntry_Allocation)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Allocation[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Allocation", key)
	}

	t.Allocation[key] = &NddTarget_TargetEntry_Allocation{
		ServiceName: &ServiceName,
	}

	return t.Allocation[key], nil
}

// GetOrCreateAllocation retrieves the value with the specified keys from
// the receiver NddTarget_TargetEntry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NddTarget_TargetEntry) GetOrCreateAllocation(ServiceName string) *NddTarget_TargetEntry_Allocation {

	key := ServiceName

	if v, ok := t.Allocation[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAllocation(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAllocation got unexpected error: %v", err))
	}
	return v
}

// GetAllocation retrieves the value with the specified key from
// the Allocation map field of NddTarget_TargetEntry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NddTarget_TargetEntry) GetAllocation(ServiceName string) *NddTarget_TargetEntry_Allocation {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Allocation[key]; ok {
		return lm
	}
	return nil
}

// DeleteAllocation deletes the value with the specified keys from
// the receiver NddTarget_TargetEntry. If there is no such element, the function
// is a no-op.
func (t *NddTarget_TargetEntry) DeleteAllocation(ServiceName string) {
	key := ServiceName

	delete(t.Allocation, key)
}

// AppendAllocation appends the supplied NddTarget_TargetEntry_Allocation struct to the
// list Allocation of NddTarget_TargetEntry. If the key value(s) specified in
// the supplied NddTarget_TargetEntry_Allocation already exist in the list, an error is
// returned.
func (t *NddTarget_TargetEntry) AppendAllocation(v *NddTarget_TargetEntry_Allocation) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Allocation == nil {
		t.Allocation = make(map[string]*NddTarget_TargetEntry_Allocation)
	}

	if _, ok := t.Allocation[key]; ok {
		return fmt.Errorf("duplicate key for list Allocation %v", key)
	}

	t.Allocation[key] = v
	return nil
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *NddTarget_TargetEntry) GetOrCreateConfig() *NddTarget_TargetEntry_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &NddTarget_TargetEntry_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *NddTarget_TargetEntry) GetOrCreateState() *NddTarget_TargetEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &NddTarget_TargetEntry_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from NddTarget_TargetEntry. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddTarget_TargetEntry) GetConfig() *NddTarget_TargetEntry_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from NddTarget_TargetEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddTarget_TargetEntry) GetState() *NddTarget_TargetEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the NddTarget_TargetEntry struct, which is a YANG list entry.
func (t *NddTarget_TargetEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddTarget_TargetEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddTarget_TargetEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddTarget_TargetEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module in whose namespace
// NddTarget_TargetEntry belongs.
func (*NddTarget_TargetEntry) ΛBelongingModule() string {
	return "ndd-target"
}

// NddTarget_TargetEntry_Allocation represents the /ndd-target/target-entry/allocation YANG schema element.
type NddTarget_TargetEntry_Allocation struct {
	ServiceIdentity *string `path:"service-identity" module:"ndd-target"`
	ServiceName     *string `path:"service-name" module:"ndd-target"`
}

// IsYANGGoStruct ensures that NddTarget_TargetEntry_Allocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddTarget_TargetEntry_Allocation) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddTarget_TargetEntry_Allocation struct, which is a YANG list entry.
func (t *NddTarget_TargetEntry_Allocation) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddTarget_TargetEntry_Allocation) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddTarget_TargetEntry_Allocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddTarget_TargetEntry_Allocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module in whose namespace
// NddTarget_TargetEntry_Allocation belongs.
func (*NddTarget_TargetEntry_Allocation) ΛBelongingModule() string {
	return "ndd-target"
}

// NddTarget_TargetEntry_Config represents the /ndd-target/target-entry/config YANG schema element.
type NddTarget_TargetEntry_Config struct {
	Address           *string              `path:"address" module:"ndd-target"`
	CredentialName    *string              `path:"credential-name" module:"ndd-target"`
	Encoding          E_NddTarget_Encoding `path:"encoding" module:"ndd-target"`
	Insecure          *bool                `path:"insecure" module:"ndd-target"`
	Protocol          E_NddTarget_Protocol `path:"protocol" module:"ndd-target"`
	Proxy             *string              `path:"proxy" module:"ndd-target"`
	SkipVerify        *bool                `path:"skip-verify" module:"ndd-target"`
	TlsCredentialName *string              `path:"tls-credential-name" module:"ndd-target"`
}

// IsYANGGoStruct ensures that NddTarget_TargetEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddTarget_TargetEntry_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddTarget_TargetEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddTarget_TargetEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddTarget_TargetEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module in whose namespace
// NddTarget_TargetEntry_Config belongs.
func (*NddTarget_TargetEntry_Config) ΛBelongingModule() string {
	return "ndd-target"
}

// NddTarget_TargetEntry_State represents the /ndd-target/target-entry/state YANG schema element.
type NddTarget_TargetEntry_State struct {
	Hostname           *string                `path:"hostname" module:"ndd-target"`
	Kind               *string                `path:"kind" module:"ndd-target"`
	MacAddress         *string                `path:"mac-address" module:"ndd-target"`
	SerialNumber       *string                `path:"serial-number" module:"ndd-target"`
	SupportedEncodings []string               `path:"supported-encodings" module:"ndd-target"`
	SwVersion          *string                `path:"sw-version" module:"ndd-target"`
	VendorType         E_NddTarget_VendorType `path:"vendor-type" module:"ndd-target"`
}

// IsYANGGoStruct ensures that NddTarget_TargetEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddTarget_TargetEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddTarget_TargetEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddTarget_TargetEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddTarget_TargetEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module in whose namespace
// NddTarget_TargetEntry_State belongs.
func (*NddTarget_TargetEntry_State) ΛBelongingModule() string {
	return "ndd-target"
}

// E_NddCommon_AdminState is a derived int64 type which is used to represent
// the enumerated node NddCommon_AdminState. An additional value named
// NddCommon_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddCommon_AdminState int64

// IsYANGGoEnum ensures that NddCommon_AdminState implements the yang.GoEnum
// interface. This ensures that NddCommon_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_NddCommon_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddCommon_AdminState.
func (E_NddCommon_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddCommon_AdminState.
func (e E_NddCommon_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddCommon_AdminState")
}

const (
	// NddCommon_AdminState_UNSET corresponds to the value UNSET of NddCommon_AdminState
	NddCommon_AdminState_UNSET E_NddCommon_AdminState = 0
	// NddCommon_AdminState_enable corresponds to the value enable of NddCommon_AdminState
	NddCommon_AdminState_enable E_NddCommon_AdminState = 1
	// NddCommon_AdminState_disable corresponds to the value disable of NddCommon_AdminState
	NddCommon_AdminState_disable E_NddCommon_AdminState = 2
)

// E_NddTarget_Encoding is a derived int64 type which is used to represent
// the enumerated node NddTarget_Encoding. An additional value named
// NddTarget_Encoding_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddTarget_Encoding int64

// IsYANGGoEnum ensures that NddTarget_Encoding implements the yang.GoEnum
// interface. This ensures that NddTarget_Encoding can be identified as a
// mapped type for a YANG enumeration.
func (E_NddTarget_Encoding) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddTarget_Encoding.
func (E_NddTarget_Encoding) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddTarget_Encoding.
func (e E_NddTarget_Encoding) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddTarget_Encoding")
}

const (
	// NddTarget_Encoding_UNSET corresponds to the value UNSET of NddTarget_Encoding
	NddTarget_Encoding_UNSET E_NddTarget_Encoding = 0
	// NddTarget_Encoding_JSON corresponds to the value JSON of NddTarget_Encoding
	NddTarget_Encoding_JSON E_NddTarget_Encoding = 1
	// NddTarget_Encoding_JSON_IETF corresponds to the value JSON_IETF of NddTarget_Encoding
	NddTarget_Encoding_JSON_IETF E_NddTarget_Encoding = 2
	// NddTarget_Encoding_BYTES corresponds to the value BYTES of NddTarget_Encoding
	NddTarget_Encoding_BYTES E_NddTarget_Encoding = 3
	// NddTarget_Encoding_PROTOBUF corresponds to the value PROTOBUF of NddTarget_Encoding
	NddTarget_Encoding_PROTOBUF E_NddTarget_Encoding = 4
	// NddTarget_Encoding_ASCII corresponds to the value ASCII of NddTarget_Encoding
	NddTarget_Encoding_ASCII E_NddTarget_Encoding = 5
)

// E_NddTarget_Protocol is a derived int64 type which is used to represent
// the enumerated node NddTarget_Protocol. An additional value named
// NddTarget_Protocol_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddTarget_Protocol int64

// IsYANGGoEnum ensures that NddTarget_Protocol implements the yang.GoEnum
// interface. This ensures that NddTarget_Protocol can be identified as a
// mapped type for a YANG enumeration.
func (E_NddTarget_Protocol) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddTarget_Protocol.
func (E_NddTarget_Protocol) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddTarget_Protocol.
func (e E_NddTarget_Protocol) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddTarget_Protocol")
}

const (
	// NddTarget_Protocol_UNSET corresponds to the value UNSET of NddTarget_Protocol
	NddTarget_Protocol_UNSET E_NddTarget_Protocol = 0
	// NddTarget_Protocol_gnmi corresponds to the value gnmi of NddTarget_Protocol
	NddTarget_Protocol_gnmi E_NddTarget_Protocol = 1
	// NddTarget_Protocol_netconf corresponds to the value netconf of NddTarget_Protocol
	NddTarget_Protocol_netconf E_NddTarget_Protocol = 2
)

// E_NddTarget_VendorType is a derived int64 type which is used to represent
// the enumerated node NddTarget_VendorType. An additional value named
// NddTarget_VendorType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddTarget_VendorType int64

// IsYANGGoEnum ensures that NddTarget_VendorType implements the yang.GoEnum
// interface. This ensures that NddTarget_VendorType can be identified as a
// mapped type for a YANG enumeration.
func (E_NddTarget_VendorType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddTarget_VendorType.
func (E_NddTarget_VendorType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddTarget_VendorType.
func (e E_NddTarget_VendorType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddTarget_VendorType")
}

const (
	// NddTarget_VendorType_UNSET corresponds to the value UNSET of NddTarget_VendorType
	NddTarget_VendorType_UNSET E_NddTarget_VendorType = 0
	// NddTarget_VendorType_undefined corresponds to the value undefined of NddTarget_VendorType
	NddTarget_VendorType_undefined E_NddTarget_VendorType = 1
	// NddTarget_VendorType_nokia_srl corresponds to the value nokia_srl of NddTarget_VendorType
	NddTarget_VendorType_nokia_srl E_NddTarget_VendorType = 2
	// NddTarget_VendorType_nokia_sros corresponds to the value nokia_sros of NddTarget_VendorType
	NddTarget_VendorType_nokia_sros E_NddTarget_VendorType = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_NddCommon_AdminState": {
		1: {Name: "enable"},
		2: {Name: "disable"},
	},
	"E_NddTarget_Encoding": {
		1: {Name: "JSON"},
		2: {Name: "JSON_IETF"},
		3: {Name: "BYTES"},
		4: {Name: "PROTOBUF"},
		5: {Name: "ASCII"},
	},
	"E_NddTarget_Protocol": {
		1: {Name: "gnmi"},
		2: {Name: "netconf"},
	},
	"E_NddTarget_VendorType": {
		1: {Name: "undefined"},
		2: {Name: "nokia-srl"},
		3: {Name: "nokia-sros"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9c, 0xdd, 0x73, 0xe3, 0x34,
		0x10, 0xc0, 0xdf, 0xfb, 0x57, 0x18, 0x01, 0xc3, 0x57, 0x4c, 0x93, 0x92, 0xb6, 0x77, 0x61, 0x18,
		0x08, 0xb4, 0x37, 0xcc, 0xdc, 0x07, 0x37, 0xdc, 0x0d, 0x0f, 0x1c, 0xa1, 0xa8, 0xf6, 0x26, 0xd5,
		0xd4, 0x91, 0x33, 0xb2, 0x9c, 0x6b, 0x80, 0xf2, 0xb7, 0x33, 0xb6, 0x13, 0xc7, 0x4e, 0x62, 0x6b,
		0xe5, 0x5c, 0xd3, 0x64, 0x66, 0xef, 0x25, 0x57, 0x7b, 0x57, 0x5a, 0x4b, 0xbf, 0x5d, 0x7d, 0xad,
		0xfd, 0xcf, 0x91, 0xe3, 0x38, 0x0e, 0x7b, 0xc5, 0xc7, 0xc0, 0x7a, 0x0e, 0xf3, 0x61, 0x2a, 0x3c,
		0x60, 0xad, 0xec, 0xea, 0x73, 0x21, 0x7d, 0xd6, 0x73, 0x3a, 0xf3, 0x3f, 0x7f, 0x0a, 0xe5, 0x50,
		0x8c, 0x58, 0xcf, 0x69, 0xcf, 0x2f, 0x5c, 0x08, 0xc5, 0x7a, 0x4e, 0x56, 0x44, 0x7a, 0x41, 0x73,
		0x35, 0x02, 0xed, 0x82, 0xd4, 0x6a, 0x56, 0xba, 0x53, 0xaa, 0xa4, 0x24, 0xd5, 0x2a, 0xcb, 0x94,
		0xab, 0xcc, 0x2f, 0xaf, 0x56, 0x9d, 0xdf, 0x78, 0xad, 0x60, 0x28, 0xee, 0xd6, 0xea, 0x2a, 0xd5,
		0x27, 0x7d, 0xdf, 0xcd, 0xea, 0x5c, 0xa9, 0x2d, 0x95, 0x7a, 0x13, 0xc6, 0xca, 0x83, 0x8d, 0x25,
		0x64, 0x16, 0xc1, 0xec, 0x7d, 0xa8, 0x12, 0xa3, 0xd8, 0x24, 0xab, 0xac, 0xb5, 0x59, 0xf0, 0x67,
		0x1e, 0xf5, 0xd5, 0x28, 0x1e, 0x83, 0xd4, 0xac, 0xe7, 0x68, 0x15, 0x43, 0x85, 0x60, 0x41, 0xaa,
		0x68, 0xdb, 0x9a, 0xf0, 0x7d, 0xe9, 0xca, 0xfd, 0xca, 0x93, 0xaf, 0x36, 0x7e, 0x7e, 0x83, 0xfb,
		0x63, 0x21, 0xdd, 0x48, 0x73, 0x5d, 0xf3, 0x54, 0x8b, 0xb6, 0x29, 0x0a, 0x57, 0x98, 0x7b, 0x01,
		0x43, 0x1e, 0x07, 0x89, 0xb5, 0xef, 0x36, 0x0a, 0xa4, 0x42, 0x20, 0xf9, 0x75, 0x00, 0x6c, 0xa3,
		0xc0, 0xa0, 0xa2, 0xe0, 0x79, 0x5f, 0xb7, 0x2b, 0x6e, 0x57, 0xf5, 0x39, 0xa6, 0xef, 0xed, 0x18,
		0xc0, 0xb2, 0x60, 0xcd, 0x84, 0x35, 0x1b, 0xd6, 0x8c, 0x6c, 0x66, 0xa5, 0x82, 0x99, 0xbc, 0xf4,
		0xb7, 0xb3, 0x09, 0xe0, 0xda, 0xcd, 0xcc, 0x47, 0xc9, 0x6d, 0xbb, 0x35, 0x32, 0x97, 0x32, 0x1e,
		0x27, 0x95, 0x56, 0x98, 0x7a, 0x84, 0x30, 0x9e, 0xf1, 0x20, 0x08, 0x3d, 0xae, 0x45, 0x28, 0x11,
		0x68, 0x2f, 0x65, 0xeb, 0x01, 0xec, 0x10, 0x80, 0xbb, 0x06, 0xb0, 0x2a, 0x78, 0xe5, 0x02, 0x11,
		0xa8, 0x64, 0x24, 0x72, 0x85, 0x0f, 0x52, 0x0b, 0x3d, 0x33, 0x37, 0xc9, 0xa2, 0xa1, 0xd7, 0x34,
		0x0d, 0x0f, 0x5a, 0x1f, 0x85, 0xd0, 0x30, 0xd8, 0x40, 0xd1, 0x0c, 0x0e, 0x5b, 0x48, 0x1a, 0xc3,
		0xd2, 0x18, 0x9a, 0xc6, 0xf0, 0xd4, 0x43, 0x64, 0x80, 0x09, 0x1f, 0xd5, 0xd6, 0xdb, 0x3d, 0xf9,
		0x45, 0xb4, 0xf8, 0x22, 0x50, 0x3c, 0x41, 0xc8, 0xbe, 0x00, 0x39, 0xd2, 0x37, 0xb5, 0xa3, 0x65,
		0xf1, 0x1f, 0xae, 0x0f, 0xd3, 0x92, 0x5f, 0x0a, 0x89, 0xee, 0xf4, 0x5c, 0xe9, 0x37, 0x1e, 0xc4,
		0x50, 0x1d, 0xe4, 0x2a, 0xf5, 0x9e, 0x29, 0xee, 0x25, 0xb1, 0xf3, 0x42, 0x8c, 0x84, 0x8e, 0xcc,
		0xdc, 0xaf, 0xb7, 0x31, 0x8c, 0xb8, 0x16, 0xd3, 0xa4, 0xee, 0x21, 0x0f, 0x22, 0x40, 0x6b, 0xdf,
		0xb7, 0x2c, 0x9a, 0x84, 0xdf, 0x35, 0x6f, 0x92, 0x93, 0xd3, 0xd3, 0xc3, 0x69, 0x94, 0xa3, 0x0f,
		0x23, 0x35, 0x40, 0x10, 0xfc, 0x9a, 0x6b, 0x0d, 0x4a, 0xa2, 0x11, 0x66, 0xef, 0xfa, 0xee, 0xef,
		0xdc, 0xfd, 0xbb, 0xed, 0x3e, 0x75, 0x3e, 0xfa, 0xe1, 0xe3, 0x4f, 0x3e, 0xfd, 0xf3, 0x8f, 0xb8,
		0xdd, 0x3e, 0x39, 0xfb, 0xfc, 0x8b, 0x7f, 0xbf, 0xfa, 0xee, 0xaf, 0xff, 0xbe, 0x6e, 0x7d, 0x76,
		0x7c, 0xd5, 0xfb, 0xf6, 0x7b, 0x77, 0xf0, 0xa5, 0x39, 0x02, 0x0c, 0x8e, 0x9a, 0x3d, 0x5f, 0x0d,
		0x34, 0xf9, 0x88, 0x20, 0x33, 0xaf, 0xb7, 0x1c, 0x47, 0x10, 0x31, 0x82, 0xc6, 0x10, 0x1a, 0x43,
		0x68, 0x0c, 0xa1, 0x31, 0x84, 0xc6, 0x90, 0xc3, 0x1e, 0x43, 0xac, 0x96, 0x30, 0xcf, 0x61, 0x86,
		0x1c, 0x26, 0xd8, 0x0b, 0x11, 0xe9, 0xbe, 0xd6, 0x86, 0x25, 0xcf, 0x4b, 0x21, 0x2f, 0x03, 0x48,
		0x42, 0x9e, 0x81, 0x8a, 0x84, 0xd8, 0x82, 0x64, 0xe7, 0x49, 0xb7, 0x7b, 0x76, 0xde, 0xed, 0xb6,
		0xcf, 0xbf, 0x39, 0x6f, 0x3f, 0x3d, 0x3d, 0xed, 0x9c, 0x75, 0x6a, 0x98, 0x64, 0xbf, 0x28, 0x1f,
		0x14, 0xf8, 0x3f, 0x26, 0xd6, 0xcb, 0x38, 0x08, 0xac, 0x1e, 0xba, 0x2f, 0x65, 0xa8, 0xeb, 0xd7,
		0xdf, 0xd9, 0x90, 0xeb, 0xdd, 0xc0, 0x98, 0x4f, 0x78, 0x1a, 0xc4, 0xd8, 0xf1, 0x32, 0x7e, 0x1f,
		0x17, 0x37, 0xff, 0x8e, 0x8d, 0x4b, 0xf4, 0xac, 0x30, 0xad, 0x62, 0x4f, 0xcf, 0x47, 0x6f, 0xf6,
		0xca, 0xf7, 0xdf, 0xa6, 0x65, 0x5c, 0x65, 0x3f, 0x97, 0x49, 0x49, 0x57, 0xfd, 0x65, 0x49, 0x5b,
		0x6c, 0x2f, 0x78, 0x8b, 0x01, 0xda, 0xb0, 0xb5, 0x30, 0x97, 0xa3, 0x6d, 0x85, 0x43, 0xdb, 0x56,
		0xe0, 0xbe, 0xaf, 0x20, 0x8a, 0xf0, 0xb3, 0xc0, 0x85, 0x02, 0x4d, 0x00, 0x69, 0x02, 0x58, 0xb5,
		0x50, 0xd0, 0x4a, 0xc8, 0x91, 0xd5, 0x14, 0xf0, 0x01, 0x16, 0x39, 0x9e, 0x82, 0x74, 0xc3, 0x8b,
		0x07, 0x96, 0xeb, 0x9c, 0x55, 0x45, 0x22, 0x9d, 0x48, 0xdf, 0x6b, 0xd2, 0x41, 0x7a, 0xa1, 0x9f,
		0xd8, 0x81, 0x46, 0x3c, 0xd7, 0x20, 0xb6, 0x89, 0xed, 0xed, 0x18, 0x71, 0x90, 0xa7, 0x5d, 0xb9,
		0x6c, 0xfd, 0xa9, 0xd7, 0x76, 0x9e, 0x20, 0x64, 0x04, 0x5e, 0xac, 0x2c, 0x82, 0x7d, 0xae, 0x41,
		0x9e, 0x40, 0x9e, 0x50, 0xd1, 0xee, 0xd7, 0x61, 0x18, 0x00, 0x97, 0x36, 0x8e, 0xd0, 0x79, 0x00,
		0xb8, 0x27, 0x2a, 0xd4, 0xa1, 0x17, 0x06, 0x78, 0xb8, 0x73, 0x0d, 0x43, 0x93, 0x60, 0x12, 0x1a,
		0x72, 0xe1, 0x91, 0x1c, 0x8b, 0xfa, 0x3e, 0x1a, 0x90, 0x2f, 0x91, 0x2f, 0x6d, 0x87, 0xe4, 0x5e,
		0x8d, 0x2a, 0x13, 0x15, 0xde, 0xcd, 0xac, 0xbc, 0xee, 0x8e, 0x0e, 0xd9, 0xc9, 0x07, 0xf6, 0x7c,
		0xd5, 0x10, 0xdd, 0x8a, 0x89, 0x3b, 0x05, 0x25, 0x86, 0x36, 0xb9, 0x24, 0x05, 0x25, 0x22, 0x9c,
		0x08, 0xdf, 0xef, 0x19, 0x93, 0x0e, 0x22, 0xb7, 0xf1, 0x36, 0xd0, 0x26, 0x65, 0x42, 0x9e, 0x90,
		0x7f, 0xfc, 0xa0, 0xfe, 0x98, 0x07, 0x54, 0xb5, 0x07, 0x3d, 0x0e, 0xf6, 0x70, 0x6a, 0xee, 0x01,
		0x5b, 0x1c, 0x4c, 0xf9, 0x10, 0x79, 0x4a, 0x4c, 0x70, 0x89, 0xaf, 0x45, 0x61, 0x4a, 0xbd, 0x3e,
		0xd8, 0xd4, 0x6b, 0x73, 0x37, 0x3a, 0xc8, 0xbc, 0x12, 0x6c, 0x3e, 0x09, 0xc2, 0xff, 0x6d, 0xf2,
		0x47, 0x6c, 0xf3, 0x46, 0x1a, 0xa7, 0x46, 0xd8, 0xa7, 0x44, 0x20, 0xf2, 0x43, 0xac, 0xf2, 0x42,
		0xec, 0xf3, 0x41, 0x76, 0xf9, 0xb0, 0x0d, 0x23, 0x6f, 0xcd, 0xc6, 0x06, 0x3a, 0xbf, 0xe3, 0x43,
		0xe4, 0x75, 0x0c, 0xb6, 0x08, 0x9c, 0xb5, 0x93, 0x20, 0x4c, 0x0e, 0x17, 0x85, 0xca, 0x03, 0x08,
		0x95, 0x86, 0xd9, 0x2a, 0xc5, 0x48, 0x8a, 0x91, 0x14, 0x23, 0x2b, 0x63, 0x24, 0xf2, 0x55, 0xc1,
		0xda, 0x97, 0x04, 0xb1, 0x39, 0x4f, 0x27, 0x14, 0x25, 0x77, 0x9d, 0xf3, 0x74, 0x13, 0x46, 0xda,
		0x6e, 0x2f, 0x20, 0xd7, 0xa0, 0x0d, 0x00, 0xda, 0x00, 0xd8, 0xeb, 0x5d, 0xdd, 0xdb, 0xac, 0x6c,
		0x24, 0xd7, 0xa9, 0x34, 0x31, 0x4d, 0x4c, 0xef, 0x35, 0xd3, 0x63, 0xee, 0xb9, 0xd6, 0x79, 0xaa,
		0x45, 0x25, 0x22, 0x9c, 0x08, 0xdf, 0x6b, 0xc2, 0x23, 0x50, 0xe9, 0x19, 0x43, 0x3c, 0xbe, 0x06,
		0x65, 0xf5, 0x46, 0x5e, 0x41, 0x8d, 0x28, 0x27, 0xca, 0xf7, 0x9b, 0xf2, 0x78, 0x32, 0x09, 0x95,
		0x06, 0xdf, 0x5d, 0xe4, 0x16, 0x5a, 0xc4, 0xf3, 0x4d, 0xca, 0x44, 0x3c, 0x11, 0xbf, 0x2b, 0xe2,
		0x0d, 0x16, 0xa2, 0xde, 0x68, 0x2b, 0x6e, 0x88, 0xe1, 0xde, 0x6c, 0x2b, 0xee, 0x2b, 0x35, 0x7e,
		0xc3, 0x2d, 0x2f, 0x04, 0xf5, 0xa6, 0xdb, 0x96, 0x3e, 0xfe, 0xde, 0x9d, 0x82, 0x8a, 0x4c, 0xc7,
		0x8d, 0xe5, 0xbe, 0x5a, 0xea, 0x90, 0x47, 0x93, 0x47, 0xef, 0xf5, 0x18, 0x36, 0x05, 0xe9, 0x87,
		0xca, 0xd5, 0x18, 0xf3, 0x73, 0xd3, 0x8b, 0x4a, 0x44, 0x38, 0x11, 0xbe, 0x35, 0x26, 0xce, 0xce,
		0xd3, 0x63, 0x1f, 0x33, 0xe7, 0xc4, 0xf8, 0xb1, 0x35, 0x4c, 0xca, 0xc9, 0x9b, 0xb4, 0x90, 0x2d,
		0x0e, 0x05, 0x30, 0x9e, 0x6f, 0xd1, 0x95, 0xb8, 0xaf, 0x08, 0xc6, 0xd2, 0x87, 0xa1, 0x90, 0xe0,
		0xd3, 0x87, 0x04, 0x0f, 0xe3, 0xf0, 0x01, 0x7f, 0x44, 0x8b, 0xf3, 0xf6, 0x87, 0xf9, 0x90, 0x60,
		0xed, 0x77, 0x34, 0xe7, 0xdf, 0x71, 0xd8, 0x70, 0xde, 0x51, 0x3f, 0xcb, 0x35, 0xcf, 0x6a, 0x1b,
		0xcd, 0x62, 0xeb, 0x67, 0xad, 0xab, 0xc6, 0x1b, 0x42, 0x0f, 0x32, 0xe4, 0xb0, 0x8d, 0x87, 0x82,
		0xc6, 0x20, 0x53, 0x86, 0x68, 0xd9, 0xca, 0xd9, 0xff, 0xe6, 0xa6, 0x56, 0x99, 0xc8, 0x44, 0xf4,
		0x8c, 0xdf, 0xc2, 0xaf, 0x61, 0xb8, 0x0e, 0xf2, 0xaa, 0xd9, 0xac, 0x78, 0xab, 0x64, 0xd7, 0x45,
		0xf6, 0xbd, 0xda, 0xac, 0xc2, 0xa3, 0xfb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00,
		0xff, 0xff, 0xdd, 0x70, 0x6d, 0x44, 0xce, 0x56, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/target-entry/admin-state": []reflect.Type{
		reflect.TypeOf((E_NddCommon_AdminState)(0)),
	},
	"/target-entry/config/encoding": []reflect.Type{
		reflect.TypeOf((E_NddTarget_Encoding)(0)),
	},
	"/target-entry/config/protocol": []reflect.Type{
		reflect.TypeOf((E_NddTarget_Protocol)(0)),
	},
	"/target-entry/state/vendor-type": []reflect.Type{
		reflect.TypeOf((E_NddTarget_VendorType)(0)),
	},
	"/target-entry/vendor-type": []reflect.Type{
		reflect.TypeOf((E_NddTarget_VendorType)(0)),
	},
}
